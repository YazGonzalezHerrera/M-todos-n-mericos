{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPpZF8F1p9kbTrpinkEkWNY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/YazGonzalezHerrera/Metodos-numericos/blob/main/M%C3%A9todo%20de%20Newton%20Raphson\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 936
        },
        "id": "jQOQ3AFFnxY1",
        "outputId": "88133e93-9287-41b5-90a6-246d89516595"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La raiz es:  2.0\n",
            "El valor de f(x):  0.0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-11-8cfb8433b94c>:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  df = df.append({\n",
            "<ipython-input-11-8cfb8433b94c>:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  df = df.append({\n",
            "<ipython-input-11-8cfb8433b94c>:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  df = df.append({\n",
            "<ipython-input-11-8cfb8433b94c>:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  df = df.append({\n",
            "<ipython-input-11-8cfb8433b94c>:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  df = df.append({\n",
            "<ipython-input-11-8cfb8433b94c>:37: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"bo\" (-> color='b'). The keyword argument will take precedence.\n",
            "  plt.plot(Raiz,fx(Raiz),\"bo\",label= f'f(x)=0,x=(Raiz:6f)',color='k')\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   iteración        xi         f(xi)     f´(xi)      xi+1         Error\n",
              "0        0.0  0.000000  0.000000e+00   0.000000  2.500000  0.000000e+00\n",
              "1        1.0  2.500000  1.100000e+01  29.500000  2.127119  1.752988e-01\n",
              "2        1.0  2.127119  2.120957e+00  18.402040  2.011862  5.728853e-02\n",
              "3        1.0  2.011862  1.797629e-01  15.309257  2.000120  5.870701e-03\n",
              "4        1.0  2.000120  1.798977e-03  15.003118  2.000000  5.995343e-05\n",
              "5        1.0  2.000000  1.869164e-07  15.000000  2.000000  6.230547e-09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-699c6b96-6b30-4201-b5d5-8e46534c7548\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>iteración</th>\n",
              "      <th>xi</th>\n",
              "      <th>f(xi)</th>\n",
              "      <th>f´(xi)</th>\n",
              "      <th>xi+1</th>\n",
              "      <th>Error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>1.100000e+01</td>\n",
              "      <td>29.500000</td>\n",
              "      <td>2.127119</td>\n",
              "      <td>1.752988e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.127119</td>\n",
              "      <td>2.120957e+00</td>\n",
              "      <td>18.402040</td>\n",
              "      <td>2.011862</td>\n",
              "      <td>5.728853e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.011862</td>\n",
              "      <td>1.797629e-01</td>\n",
              "      <td>15.309257</td>\n",
              "      <td>2.000120</td>\n",
              "      <td>5.870701e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.000120</td>\n",
              "      <td>1.798977e-03</td>\n",
              "      <td>15.003118</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>5.995343e-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.869164e-07</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>6.230547e-09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-699c6b96-6b30-4201-b5d5-8e46534c7548')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-699c6b96-6b30-4201-b5d5-8e46534c7548 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-699c6b96-6b30-4201-b5d5-8e46534c7548');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Xi,f(xi),f'(xi)\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fx = lambda x: 2*(x**3)+(x**2)-13*x+6\n",
        "dx = lambda x: 6*(x**2)+2*x-13\n",
        "xi=2.5\n",
        "columnas=[\"iteración\",\"xi\",\"f(xi)\",\"f´(xi)\",\"xi+1\",\"Error\"]\n",
        "datos=[[0,0,0,0,xi,0]]\n",
        "df = pd.DataFrame(datos,columns=columnas)\n",
        "\n",
        "i=1\n",
        "tolerancia=0.00001\n",
        "error=1\n",
        "while error>tolerancia:\n",
        "  Raiz=xi-(fx(xi)/dx(xi))\n",
        "  error = np.abs((Raiz-xi)/Raiz)\n",
        "  df = df.append({\n",
        "      \"iteración\":1,\n",
        "      \"xi\":xi,\n",
        "      \"f(xi)\":fx(xi),\n",
        "      \"f´(xi)\":dx(xi),\n",
        "      \"xi+1\":Raiz,\n",
        "      \"Error\":error\n",
        "  },ignore_index=True)\n",
        "  xi=Raiz\n",
        "  i+=1\n",
        "print(\"La raiz es: \",Raiz)\n",
        "print(\"El valor de f(x): \",fx(Raiz))\n",
        "df.head(15)\n",
        "xs=np.linspace(Raiz-1,Raiz+1,50)\n",
        "\n",
        "plt.plot(xs,fx(xs),label=\"f(x)\")\n",
        "plt.title(\"Método de Newton Raphson\")\n",
        "plt.axhline(y=0,color=\"g\")\n",
        "plt.plot(Raiz,fx(Raiz),\"bo\",label= f'f(x)=0,x=(Raiz:6f)',color='k')\n",
        "plt.legend(loc='upper left')\n",
        "df.head(i) "
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1VObkyVTtPN9"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}